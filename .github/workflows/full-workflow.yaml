name: full-workflow

env:
  ## DOCKER BUILD PARAMS
  NAME: flask-web
  IMAGE: gregnrobinson/flask-demo-app
  BUILD_WORKDIR: ./demo/flask-web

  ## SONAR PARAMS
  ORG: ci-testing
  PROJECT_KEY: github-actions-test
  URL: https://sonarcloud.io
  MVN_WORKDIR: ./tekton/demo/maven-test

  ## OWASP ZAP
  SCAN_TYPE: 'base' # Accepted values are base and full.
  TARGET_URL: http://www.itsecgames.com
  DURATION: '2'
  MAX_DURATION: '5'

  ## OPENSHIFT ENVIRONMENT
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}

  OPENSHIFT_NAMESPACE: "default"
  # üñäÔ∏è EDIT to set a name for your OpenShift app, or a default one will be generated below.

  APP_NAME: "flask-demo-app"

  # üñäÔ∏è EDIT with the port your application should be accessible on.
  # If the container image exposes *exactly one* port, this can be left blank.
  # Refer to the 'port' input of https://github.com/redhat-actions/oc-new-app
  APP_PORT: "80"

  # üñäÔ∏è EDIT to change the image registry settings.
  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  IMAGE_REGISTRY: docker.io/gregnrobinson
  IMAGE_REGISTRY_USER: ${{ secrets.DOCKERHUB_USERNAME }}
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
on:
  # https://docs.github.com/en/actions/reference/events-that-trigger-workflows
  workflow_dispatch:
  push:

jobs:
  codeql-scan:
    name: CodeQL Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
  build:
    name: Docker Build
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v3.x
    - uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    - name: Build
      working-directory: ${{ env.BUILD_WORKDIR }}
      run: >
        docker buildx build
        --platform=linux/amd64
        -t ${{ env.IMAGE }}:${{ env.GITHUB_SHA_SHORT }}
        --output=type=image,push=true
        ${GITHUB_WORKSPACE}/${{ env.BUILD_WORKDIR }}
  trivy-scan:
    needs: build
    name: Trivy Scan
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - name: Trivy Vulnerability Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE }}:${{ env.GITHUB_SHA_SHORT }}
        format: table
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: os,library
        severity: CRITICAL
  sonar-scan-repo:
    needs: trivy-scan
    name: Sonar Scan Repo
    runs-on: ubuntu-latest
    steps:
      - name: Setup
        uses: warchant/setup-sonar-scanner@v3
      - name: Run Sonar Scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: sonar-scanner
             -Dsonar.login=${{ secrets.SONAR_TOKEN }}
             -Dsonar.organization=${{ env.ORG }}
             -Dsonar.host.url=${{ env.URL }}
             -Dsonar.projectKey=${{ env.PROJECT_KEY }}
  sonar-scan-mvn:
    name: Sonar Scan Mvn
    runs-on: ubuntu-latest
    needs: trivy-scan
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud Packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven Packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build / Analyze
        working-directory: ${{ env.MVN_WORKDIR }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${{ env.PROJECT_KEY }}
  push:
    name: Docker Push
    needs: [sonar-scan-mvn, sonar-scan-repo]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v3.x
    - uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    - uses: release-drafter/release-drafter@v5
      with:
        publish: true
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    - id: latest
      uses: pozetroninc/github-action-get-latest-release@master
      with:
        owner: bcgov
        repo: security-pipeline-templates
        excludes: prerelease, draft
    - name: Tag Push Latest
      working-directory: ${{ env.BUILD_WORKDIR }}
      run: >
        docker buildx build
        --platform=linux/amd64
        -t ${{ env.IMAGE }}:${{ env.GITHUB_SHA_SHORT }}
        -t ${{ env.IMAGE }}:${{ steps.latest.outputs.release }}
        -t ${{ env.IMAGE }}:latest
        --output=type=image,push=true
        ${GITHUB_WORKSPACE}/${{ env.BUILD_WORKDIR }}
  openshift-ci-cd:
    needs: push
    name: Deploy to OpenShift
    # ubuntu-20.04 can also be used.
    runs-on: ubuntu-18.04
    environment: production

    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}

    steps:
    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v3.x
    - name: Setup Tailscale
      uses: tailscale/github-action@main
      with:
        authkey: ${{ secrets.TAILSCALE_API_KEY }}

    - name: Check for required secrets
      uses: actions/github-script@v4
      with:
        script: |
          const secrets = {
            OPENSHIFT_SERVER: `${{ secrets.OPENSHIFT_SERVER }}`,
            OPENSHIFT_TOKEN: `${{ secrets.OPENSHIFT_TOKEN }}`,
          };

          const GHCR = "ghcr.io";
          if (`${{ env.IMAGE_REGISTRY }}`.startsWith(GHCR)) {
            core.info(`Image registry is ${GHCR} - no registry password required`);
          }
          else {
            core.info("A registry password is required");
            secrets["IMAGE_REGISTRY_PASSWORD"] = `${{ secrets.IMAGE_REGISTRY_PASSWORD }}`;
          }

          const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
            if (value.length === 0) {
              core.error(`Secret "${name}" is not set`);
              return true;
            }
            core.info(`‚úîÔ∏è Secret "${name}" is set`);
            return false;
          });

          if (missingSecrets.length > 0) {
            core.setFailed(`‚ùå At least one required secret is not set in the repository. \n` +
              "You can add it using:\n" +
              "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
              "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
              "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
          }
          else {
            core.info(`‚úÖ All the required secrets are set`);
          }

    - name: Check out repository
      uses: actions/checkout@v2

    - name: Determine App Name
      if: env.APP_NAME == ''
      run: |
        echo "APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV

    - name: Install OC
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: 4

    # https://github.com/redhat-actions/oc-login#readme
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
        openshift_token: ${{ env.OPENSHIFT_TOKEN }}
        insecure_skip_tls_verify: true
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}

    - name: Install Helm
      uses: azure/setup-helm@v1
      with:
        version: 'latest' # default is latest stable
      id: install

    # kubectl port-forward deployment/flask-web 8080:80
    - name: Helm Deploy
      run: |
        #kubectl create ns flask-web || echo "namespace exists..."
        helm upgrade --install flask-web -f ./demo/flask-web/helm/values.yaml ./demo/flask-web/helm --set image.tag=${{ env.GITHUB_SHA_SHORT }}
        kubectl rollout restart deploy
      id: deploy
  zap-owasp:
    needs: openshift-ci-cd
    runs-on: ubuntu-latest
    name: OWASP ZAP Scan
    steps:
      - name: ZAP Base Scan
        if: ${{ env.SCAN_TYPE == 'base' }}
        uses: zaproxy/action-baseline@v0.6.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'owasp/zap2docker-stable'
          target: ${{ env.TARGET_URL }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -d -T ${{ env.MAX_DURATION }} -m ${{ env.DURATION }}'
          issue_title: OWAP Baseline
      - name: ZAP Full Scan
        if: ${{ env.SCAN_TYPE == 'full' }}
        uses: zaproxy/action-full-scan@v0.3.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'owasp/zap2docker-stable'
          target: ${{ env.TARGET_URL }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -d -T ${{ env.MAX_DURATION }} -m ${{ env.DURATION }}'
          issue_title: OWASP Full
